generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Relationship {
  id                                   Int            @id @default(autoincrement())
  senderID                             Int
  receiverID                           Int
  kind                                 RelationKind?
  usersRelationshipreceiverIDTousers User         @relation("Relationship_receiverIDTousers", fields: [receiverID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usersRelationshipsenderIDTousers   User         @relation("RelationshipSenderIDToUser", fields: [senderID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Channel {
  id                Int                 @id @default(autoincrement())
  name              String
  password          String?
  kind              ChannelKind
  createdAt        DateTime           @db.Timestamp(6)
  channelConnection ChannelConnection[]
  messages          Message[]
}

model ChannelConnection {
  id         Int           @id @default(autoincrement())
  userId     Int
  channelId  Int
  role       ChannelRole
  muted      DateTime?     @db.Timestamp(6)
  createdAt DateTime     @db.Timestamp(6)
  channel    Channel      @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Message {
  id         Int       @id @default(autoincrement())
  userID     Int
  body       String
  createdAt DateTime @db.Timestamp(6)
  users      User     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  channel    Channel   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messagesIdFkey1")
}

model users {
  id                                          Int                 @id @unique
  username                                    String
  avatar                                      String
  twoFAEnabled                                Boolean             @default(false)
  totpKey                                     String?
  createdAt                                  DateTime            @default(now())
  RelationshipReceiverIDToUser              Relationship[]      @relation("RelationshipReceiverIDToUser")
  RelationshipSenderIDToUser                Relationship[]      @relation("RelationshipSenderIDToUser")
  channelConnection                           channelConnection[]
  messages                                    Message[]
}

enum ChannelRole {
  OWNER
  ADMIN
  DEFAULT
  INVITED
  BANNED
}

enum ChannelKind {
  DIRECT
  PROTECTED
  PRIVATE
  PUBLIC
}

enum RelationKind {
  FRIENDS
  INVITE
  BLOCKED
}
