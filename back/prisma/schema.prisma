generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Relationship {
  id                                   Int            @id @default(autoincrement())
  senderID                             Int?
  receiverID                           Int?
  kind                                 RelationKind?
  users_Relationship_receiverIDTousers users?         @relation("Relationship_receiverIDTousers", fields: [receiverID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_Relationship_senderIDTousers   users?         @relation("Relationship_senderIDTousers", fields: [senderID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model channel {
  id                Int                 @id @default(autoincrement())
  name              String
  password          String?
  kind              ChannelKind?
  created_at        DateTime?           @db.Timestamp(6)
  channelConnection channelConnection[]
  messages          messages?
}

model channelConnection {
  id         Int           @id @default(autoincrement())
  userId     Int?
  channelId  Int?
  role       ChannelRole?
  muted      DateTime?     @db.Timestamp(6)
  created_at DateTime?     @db.Timestamp(6)
  channel    channel?      @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model messages {
  id         Int       @id @default(autoincrement())
  userID     Int?
  body       String?
  created_at DateTime? @db.Timestamp(6)
  users      users     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  channel    channel   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messages_id_fkey1")
}

model users {
  id                                          Int                 @id @unique
  username                                    String
  avatar                                      String
  twoFAEnabled                                Boolean             @default(false)
  totpKey                                     String?
  created_at                                  DateTime            @default(now())
  Relationship_Relationship_receiverIDTousers Relationship[]      @relation("Relationship_receiverIDTousers")
  Relationship_Relationship_senderIDTousers   Relationship[]      @relation("Relationship_senderIDTousers")
  channelConnection                           channelConnection[]
  messages                                    messages?
}

enum channel_role {
  owner
  admin
  defaultUser
  invited
  banned
}

enum channel_type {
  direct
  protected
  private
  public
}

enum relation_type {
  friends
  invite
  blocked
}
