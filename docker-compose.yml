version: '3'

services:

  frontend:
    container_name: frontend
    image: front_image
    build:
      context: front
      dockerfile: Dockerfile
      target: prod
      args:
        - NODE_ENV=production
        - API_URL=${API_URL:-http://localhost/api}
        - WS_BASE_URL=${WS_BASE_URL:-ws://localhost/}
    expose:
      - 3000
    env_file:
      - .env
    depends_on:
      - backend
    restart: always
    networks:
      - default

  backend:
    container_name: backend
    image: back_image
    build:
      context: back
      dockerfile: Dockerfile
      target: prod
      args:
        - NODE_ENV=production
    expose:
      - 3000
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    restart: always
    networks:
      - db-back
      - default

  database:
    container_name: database
    image: postgres
    env_file:
      - .env
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - db-back

  proxy:
    container_name: nginx
    image: nginx:alpine
    volumes:
      - ./proxy/templates:/etc/nginx/templates
      - ./proxy/entrypoint-wrapper.sh:/entrypoint-wrapper.sh
    entrypoint: ['/entrypoint-wrapper.sh']
    ports:
      - ${BIND_ADDRESS}:${NGINX_PORT}:80
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=${NGINX_PORT:-80}
      - BACK_HOST=${BACK_HOST:-backend}
      - BACK_PORT=${BACK_PORT:-3000}
      - FRONT_HOST=${FRONT_HOST:-frontend}
      - FRONT_PORT=${FRONT_PORT:-3000}
    restart: always
    depends_on:
      - backend
      - frontend
    networks:
      - default

volumes:
  postgres_volume:
    name: postgres_volume

networks:
  db-back:
    name: 42rave_db-back
  default:
    name: 42rave_default


